<h1>Initializing a new git repository in an existing app</h1>
	<p>The command for initializing you new repository is:</p>
	<strong>
		<p>
			git init 
		</p>
	</strong>
<h1>Creating a new branch</h1>
	<h3>Creating a branch with branch</h3>
		<p>When using the branch command you create the branch but you don't move inside that branch, you use tha command:</p>
		<strong>
			<p>
				git branch rama1
			</p>
		</strong>
	<h3>Creating a branch with checkout</h3>
		<p>When using the checkout command you create the branch and you move inside that branch, you use tha command:</p>
		<strong>
			<p>
				git checkout -b "r1" 
			</p>
		</strong>
<h1>Making a commit including all of the actual changes</h1>
	<h3>Basic Git Workflow</h3>
		<p>The basic Git workflow goes something like this:</p>
		<ol>
			<li>You modify files in your working tree.</li>
			<li>You stage the files, adding snapshots of them to your staging area.</li>
			<li>You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.</li>
		</ol>
	<h3>Commit</h3>
		<p>When you want to save all the changes done in the working directory which have already been passed to staging area you use the commit command. The command is: </p>
		<strong>
			<p>
				git commit -m "first commit"
			</p>
		</strong>
		<p>This commmand allows a message therefore the m and a string with your message which usually describes the changes made </p>
<h1>Sending the code to the remote repository</h1>
		<p>When you want to send your code to your remote repository you use the command:</p>
		<strong>
			<p>
				git push origin master
			</p>
		</strong>
		<p>That is of course if your remote repository was named origin which is a good practice.</p>
		<p>You can checkout your remote branches with the command:</p>
		<strong>
			<p>
				git remote -v
			</p>
		</strong>
		<br>

<h1>Setting the origin of a remote repository to avoid having to write it down everytime a push or a pull is done</h1>
		<p>When you want to set a remote repository, by convention as origin, you use the command:</p>
		<strong>
			<p>
				git remote add origin [url_of_repository]
			</p>
		</strong>
<h1>Difference between reset and revert</h1>
		<strong>
			<p>
				git revert
			</p>
		</strong>
		<p>This command creates a new commit that undoes the changes from a previous commit. This command adds new history to the project (it doesn't modify existing history).</p>
		<strong>
			<p>
				git reset
			</p>
		</strong>
		<p>This command is a little more complicated. It actually does a couple of different things depending on how it is invoked. It modifies the index (the so-called "staging area"). Or it changes which commit a branch head is currently pointing at. This command may alter existing history (by changing the commit that a branch references).</p>
		<strong>
			<p>
				Conclusion
			</p>
		</strong>
		<p>If a commit has been made somewhere in the project's history, and you later decide that the commit is wrong and should not have been done, then git revert is the tool for the job. It will undo the changes introduced by the bad commit, recording the "undo" in the history.</p>

		<p>If you have made a commit, but haven't shared it with anyone else and you decide you don't want it, then you can use git reset to rewrite the history so that it looks as though you never made that commit.</p>
		<br>
<h1>Besides switching branches what is the command git checkout used for</h1>
		<strong>
			<p>
				git checkout
			</p>
		</strong>
		<p>This command allows you to switch branches, sometimes while creating a new branch by adding the branch flag -b. It also allows you to restore working file trees</p>
<h1>How are you able to see the commits that have been done to the project</h1>
		<strong>
			<p>
				git log
			</p>
		</strong>
		<p>This command allows you see the commits in the project, also with the author, message, name and date of the commit</p>
<h1>Having modified 2 files, how do you commit each one separately</h1>
		<strong>
			<p>git add [file A] # add [file A] to staging area</p>
			<p>git commit [file A]</p>
			<p>git add [file B] # add [file B] to staging area</p>
			<p>git commit [file B]</p>

		</strong>
		<p>This commands allow you commit changes on files separately.</p>

		<%= link_to "Home", root_path %>